package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"os"

	"github.com/gorilla/mux"
	"github.com/mmcdole/gofeed"
)

func main() {
	r := mux.NewRouter()
	r.HandleFunc("/", handleListEntries)
	r.HandleFunc("/{key}/read", handleMarkAsRead)
	r.HandleFunc("/{key}/delete", handleDelete)

	log.Fatal(http.ListenAndServe(":8081", r))
}

func handleListEntries(w http.ResponseWriter, r *http.Request) {
	resp, err := http.Get("http://localhost:8080/unread")
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	defer resp.Body.Close()

	var entries []gofeed.Item

	err = json.NewDecoder(resp.Body).Decode(&entries)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	fmt.Println("Unread entries:")
	for i, entry := range entries {
		fmt.Printf("%d. %s\n", i+1, entry.Title)
	}
}

func handleMarkAsRead(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	key := url.PathEscape(vars["key"])

	req, err := http.NewRequest("PUT", fmt.Sprintf("http://localhost:8080/read?key=%s", key), nil)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		fmt.Println("Failed to mark entry as read")
	} else {
		fmt.Println("Entry marked as read")
	}
}

func handleDelete(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	key := url.PathEscape(vars["key"])

	req, err := http.NewRequest("DELETE", fmt.Sprintf("http://localhost:8080/delete?key=%s", key), nil)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		fmt.Println("Failed to delete entry")
	} else {
		fmt.Println("Entry deleted")
	}
}

