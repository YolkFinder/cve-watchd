/*
MIT License

Copyright (c) [year] [copyright holder]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE GENERATED IN PATNERSHIP WITH CHATGPT IS PROVIDED "AS IS", 
WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/mmcdole/gofeed"
)

func main() {
	// Load configuration files
	config, err := LoadConfig("/etc/cve-watchd/config")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error loading configuration: %v\n", err)
		os.Exit(1)
	}

	// Load RSS feeds
	feeds, err := LoadFeeds(config.RSSFilePath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error loading RSS feeds: %v\n", err)
		os.Exit(1)
	}

	// Load monitored terms
	monitored, err := LoadMonitored(config.MonitoredFilePath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error loading monitored terms: %v\n", err)
		os.Exit(1)
	}

	// Load ignored terms
	ignored, err := LoadIgnored(config.IgnoreFilePath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error loading ignored terms: %v\n", err)
		os.Exit(1)
	}

	// Run loop to periodically fetch and parse RSS feeds
	for {
		for _, feed := range feeds {
			// Fetch RSS feed
			fp := gofeed.NewParser()
			feedData, err := fp.ParseURL(feed)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error fetching RSS feed %s: %v\n", feed, err)
				continue
			}

			// Check each entry for monitored terms and print if found
			for _, item := range feedData.Items {
				title := strings.ToLower(item.Title)
				for _, term := range monitored {
					if strings.Contains(title, strings.ToLower(term)) {
						// Check if item is ignored
						ignore := false
						for _, ignoredTerm := range ignored {
							if strings.Contains(title, strings.ToLower(ignoredTerm)) {
								ignore = true
								break
							}
						}

						// Print item if not ignored
						if !ignore {
							fmt.Printf("%s: %s\n%s\n\n", item.PublishedParsed.Format(time.RFC3339), item.Title, item.Link)
						}
						break
					}
				}
			}
		}

		// Sleep for configured interval before fetching feeds again
		time.Sleep(config.Interval)
	}
}

// LoadConfig loads the configuration file at the given path
func

