/*
MIT License

Copyright (c) 2023 YolkFinder

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE GENERATED IN PATNERSHIP WITH CHATGPT AND IS PROVIDED "AS IS", 
WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"time"

	"github.com/mmcdole/gofeed"
	"github.com/tidwall/buntdb"
)

type Config struct {
	RSSFile    string `json:"rssfile"`
	MonFile    string `json:"monfile"`
	IgnoreFile string `json:"ignorefile"`
	DBPath     string `json:"dbpath"`
}

type Feed struct {
	URL      string
	LastSeen time.Time
}

type Entry struct {
	ID        string
	Title     string
	Link      string
	Content   string
	Published time.Time
}

func main() {
	// Load config
	config, err := loadConfig("/etc/cve-watchd/config.json")
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// Open database
	db, err := buntdb.Open(config.DBPath)
	if err != nil {
		log.Fatalf("Failed to open database: %v", err)
	}
	defer db.Close()

	// Load feeds
	feeds, err := loadFeeds(config.RSSFile)
	if err != nil {
		log.Fatalf("Failed to load feeds: %v", err)
	}

	// Load monitored and ignored terms
	monitored, err := loadTerms(config.MonFile)
	if err != nil {
		log.Fatalf("Failed to load monitored terms: %v", err)
	}
	ignored, err := loadTerms(config.IgnoreFile)
	if err != nil {
		log.Fatalf("Failed to load ignored terms: %v", err)
	}

	// Parse feeds
	for _, feed := range feeds {
		fp := gofeed.NewParser()
		feedData, err := fp.ParseURL(feed.URL)
		if err != nil {
			log.Printf("Failed to parse feed %q: %v", feed.URL, err)
			continue
		}

		for _, item := range feedData.Items {
			entry := Entry{
				ID:        item.GUID,
				Title:     item.Title,
				Link:      item.Link,
				Content:   item.Content,
				Published: *item.PublishedParsed,
			}

			// Check if entry should be processed
			if shouldProcess(entry, monitored, ignored, db) {
				processEntry(entry, db)
			}
		}

		// Update feed last seen time
		feed.LastSeen = time.Now().UTC()
		if err := saveFeed(feed, config.RSSFile); err != nil {
			log.Printf("Failed to save feed %q: %v", feed.URL, err)
		}
	}
}

func loadConfig(configFile string) (*Config, error) {
	configData, err := ioutil.ReadFile(configFile)
	if err != nil {
		return nil, err
	}

	var config Config
	if err := json.Unmarshal(configData, &config); err != nil {
		return nil, err
	}

	return &config, nil
}

func loadFeeds(feedFile string) ([]Feed, error) {
	feedData, err := ioutil.ReadFile(feedFile)
	if err != nil {
		return nil, err
	}

	var feeds []Feed
	for _, line := range strings.Split(string(feedData), "\n") {
		line = strings.TrimSpace(line)
		if line == "" {
			continue
		}

		feeds = append(feeds, Feed{
			URL: line,
		})
	}

	return feeds, nil
}

func loadTerms(termFile string) ([]

