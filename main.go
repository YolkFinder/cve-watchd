/*
MIT License

Copyright (c) 2023 YolkFinder

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE GENERATED IN PATNERSHIP WITH CHATGPT AND IS PROVIDED "AS IS", 
WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/boltdb/bolt"
	"github.com/mmcdole/gofeed"
)

type Config struct {
	RSSFile       string `json:"rss_file"`
	KeywordFile   string `json:"keyword_file"`
	BlacklistFile string `json:"blacklist_file"`
	Interval      int    `json:"interval"`
}

type Server struct {
	db  *bolt.DB
	cfg *Config
}

func main() {
	s := &Server{}
	err := s.readConfig()
	if err != nil {
		log.Fatalf("Failed to read config: %v", err)
	}

	err = s.initDB()
	if err != nil {
		log.Fatalf("Failed to init database: %v", err)
	}

	go s.startFetching()

	http.HandleFunc("/unread", s.handleUnreadEntries)
	http.HandleFunc("/read", s.handleMarkAsRead)
	http.HandleFunc("/delete", s.handleDelete)

	log.Fatal(http.ListenAndServe(":8080", nil))
}

func (s *Server) readConfig() error {
	configFile, err := os.Open("/etc/cve-watchd/config.json")
	if err != nil {
		return err
	}
	defer configFile.Close()

	bytes, err := ioutil.ReadAll(configFile)
	if err != nil {
		return err
	}

	s.cfg = &Config{}
	err = json.Unmarshal(bytes, s.cfg)
	if err != nil {
		return err
	}

	return nil
}

func (s *Server) initDB() error {
	db, err := bolt.Open("cve-watchd.db", 0600, &bolt.Options{Timeout: 1 * time.Second})
	if err != nil {
		return err
	}

	s.db = db

	return nil
}

func (s *Server) startFetching() {
	for {
		s.fetchEntries()
		time.Sleep(time.Duration(s.cfg.Interval) * time.Minute)
	}
}

func (s *Server) fetchEntries() {
	rssUrls, err := ioutil.ReadFile(s.cfg.RSSFile)
	if err != nil {
		log.Printf("Failed to read RSS file: %v", err)
		return
	}

	keywords, err := ioutil.ReadFile(s.cfg.KeywordFile)
	if err != nil {
		log.Printf("Failed to read keyword file: %v", err)
		return
	}

	blacklist, err := ioutil.ReadFile(s.cfg.BlacklistFile)
	if err != nil {
		log.Printf("Failed to read blacklist file: %v", err)
		return
	}

	for _, url := range strings.Split(string(rssUrls), "\n") {
		feed, err := gofeed.NewParser().ParseURL(url)
		if err != nil {
			log.Printf("Failed to parse feed %s: %v", url, err)
			continue
		}

		for _, entry := range feed.Items {
			if s.entryMatchesKeywords(entry, keywords) && !s.entryMatchesKeywords(entry, blacklist) {
				s.saveEntry(feed, entry)
			}
		}
	}
}

func (s *Server) entryMatchesKeywords(entry *gofeed.Item, keywords []byte) bool {
	for _, keyword := range strings.Split(string(keywords), "\n") {
		if strings.Contains(entry.Title, keyword) || strings.Contains(entry.Description, keyword) {
			return true
		}
	}

	return false
}

func (s *Server) saveEntry(feed *gofeed.Feed, entry *gofeed.Item) error {
	var (
		tx *bolt.Tx
		bucket *bolt.Bucket
		key []byte
		value []byte
	)

	tx, err := s.db.Begin(true)
	if err != nil {
		return err
	}
	defer tx.Rollback()

	bucket, err = tx.CreateBucketIfNotExists([]byte(feed.Title))
	if err != nil {
		return err
	}

	key = []byte(fmt.Sprintf("%s-%s", entry.Title, entry.Link))
	value, err = json.Marshal(entry)
	if err != nil {
		return err
	}

	err = bucket.Put(key, value)
	if err != nil {
		return err
	}

	err = tx.Commit()
	if err != nil {
		return err
	}

	return nil
}

func (s *Server) handleUnreadEntries(w http.ResponseWriter, r *http.Request) {
	var entries []gofeed.Item

	err := s.db.View(func(tx *bolt.Tx) error {
		return tx.ForEach(func(name []byte, b *bolt.Bucket) error {
			return b.ForEach(func(k, v []byte) error {
				var entry gofeed.Item
				err := json.Unmarshal(v, &entry)
				if err != nil {
					return err
				}

				entries = append(entries, entry)

				return nil
			})
		})
	})

	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	unreadEntries := make([]gofeed.Item, 0)

	for _, entry := range entries {
		if !s.isEntryRead(entry) {
			unreadEntries = append(unreadEntries, entry)
		}
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(unreadEntries)
}

func (s *Server) handleMarkAsRead(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	key := []byte(r.Form.Get("key"))

	err = s.db.Update(func(tx *bolt.Tx) error {
		for _, bucketName := range tx.ListBucketNames() {
			b := tx.Bucket([]byte(bucketName))
			err := b.Delete(key)
			if err != nil {
				return err
			}
		}

		return nil
	})

	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func (s *Server) handleDelete(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	key := []byte(r.Form.Get("key"))

	err = s.db.Update(func(tx *bolt.Tx) error {
		for _, bucketName := range tx.ListBucketNames() {
			b := tx.Bucket([]byte(bucketName))
			v := b.Get(key)
			if v != nil {
				return b.Delete(key)
			}
		}

		return nil
	})

	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func (s *Server) isEntryRead(entry gofeed.Item) bool {
	var read bool

	err := s.db.View(func(tx *bolt.Tx) error {
		for _, bucketName := range tx.ListBucketNames() {
			b := tx.Bucket([]byte(bucketName))
			v := b.Get([]byte(fmt.Sprintf("%s-%s", entry.Title, entry.Link)))
			if v != nil {
				read = true
				return nil
			}
		}

		return nil
	})

	if err != nil {
		log.Printf("Failed to check if entry is read: %v", err)
		return false
	}

	return read
}

