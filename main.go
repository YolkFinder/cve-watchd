/*
MIT License

Copyright (c) 2023 YolkFinder

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE GENERATED IN PATNERSHIP WITH CHATGPT AND IS PROVIDED "AS IS", 
WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
	"github.com/boltdb/bolt"
)

type CVEData struct {
	CVEItems []struct {
		CVE struct {
			DataFormat string `json:"data_type"`
			CVEDataMeta struct {
				ID       string `json:"ID"`
				ASSIGNER string `json:"ASSIGNER"`
			} `json:"CVE_data_meta"`
		} `json:"cve"`
	} `json:"CVE_Items"`
}

type Config struct {
	RssFile     string `json:"rssfile"`
	Monitored   string `json:"monfile"`
	Ignore      string `json:"ignorefile"`
	Database    string `json:"dbpath"`
	Interval    int    `json:"interval"`
	WebhookURL  string `json:"webhook_url"`
	WebhookIcon string `json:"webhook_icon"`
	WebhookUser string `json:"webhook_username"`
}

func main() {
	// Read command line arguments
	configPath := flag.String("config", "/etc/cve-watchd/config.json", "path to configuration file")
	flag.Parse()

	// Load configuration
	configFile, err := ioutil.ReadFile(*configPath)
	if err != nil {
		log.Fatalf("Error loading configuration file: %v", err)
	}
	var config Config
	err = json.Unmarshal(configFile, &config)
	if err != nil {
		log.Fatalf("Error parsing configuration file: %v", err)
	}

	// Set up database
	db, err := bolt.Open(config.Database, 0600, &bolt.Options{Timeout: 1 * time.Second})
	if err != nil {
		log.Fatalf("Error opening database: %v", err)
	}
	defer db.Close()

	err = db.Update(func(tx *bolt.Tx) error {
		_, err := tx.CreateBucketIfNotExists([]byte("cves"))
		if err != nil {
			return fmt.Errorf("Error creating bucket: %v", err)
		}
		return nil
	})
	if err != nil {
		log.Fatalf("Error creating bucket: %v", err)
	}

	// Read RSS feed
	rssFile, err := os.Open(config.RssFile)
	if err != nil {
		log.Fatalf("Error opening RSS feed file: %v", err)
	}
	defer rssFile.Close()

	rssData, err := ioutil.ReadAll(rssFile)
	if err != nil {
		log.Fatalf("Error reading RSS feed file: %v", err)
	}

	var cveData CVEData
	err = json.Unmarshal(rssData, &cveData)
	if err != nil {
		log.Fatalf("Error parsing RSS feed: %v", err)
	}

	// Read monitored CVEs
	monFile, err := os.Open(config.Monitored)
	if err != nil {
		log.Fatalf("Error opening monitored CVEs file: %v", err)
	}
	defer monFile.Close()

	monData, err := ioutil.ReadAll(monFile)
	if err != nil {
		log.Fatalf("Error reading monitored CVEs file: %v", err)
	}

	monitored := strings.Split(string(monData), "\n")

	// Read ignored CVEs
	ignoreFile, err := os.Open(config.Ignore)
	if err != nil {
		log.Fatalf("Error opening ignored CVEs file: %v", err)
	}
	defer ignoreFile.Close()

	ignoreData, err := ioutil.ReadAll(ignoreFile)
	if err != nil {

